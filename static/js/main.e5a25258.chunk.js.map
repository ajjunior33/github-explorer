{"version":3,"sources":["assets/github-background.svg","styles/global.ts","assets/logo.svg","pages/Dashboard/style.ts","services/api.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["createGlobalStyle","githubBackground","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","api","axios","create","baseURL","Dashboard","useState","storageRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","newRepo","setNewRepo","inputError","setInputError","e","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","type","value","onChange","target","placeholder","map","to","full_name","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","href","html_url","rel","title","user","id","Routes","path","exact","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5a25258.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github-background.7fa45dda.svg\";","import { createGlobalStyle } from \"styled-components\";\r\n\r\nimport githubBackground from '../assets/github-background.svg'\r\n\r\nexport default createGlobalStyle`\r\n*{\r\n    margin:0;\r\n    padding:0;\r\n    outline:0;\r\n    box-sizing: border-box;\r\n}\r\nbody{\r\n    background:#F0F0F5 url(${githubBackground}) no-repeat 70% top;\r\n    -webkit-font-smoothing:antialiased;\r\n}\r\nbody, input, button{\r\n    font-size:15px;\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n#root{\r\n    max-width:960px;\r\n    margin:0 auto;\r\n    padding: 40px 20px;\r\n}\r\nbutton{\r\n    cursor:pointer;\r\n}\r\n`;\r\n\r\n","export default __webpack_public_path__ + \"static/media/logo.469cc31b.svg\";","import styled, { css } from \"styled-components\";\r\nimport { shade } from \"polished\";\r\n\r\ninterface FormProps {\r\n  hasError: boolean;\r\n}\r\nexport const Title = styled.h1`\r\n  font-size: 48px;\r\n  color: #3a3a3a;\r\n  margin-top: 80px;\r\n  max-width: 450px;\r\n  line-height: 56px;\r\n`;\r\n\r\nexport const Form = styled.form<FormProps>`\r\n  margin-top: 40px;\r\n  max-width: 700px;\r\n\r\n  display: flex;\r\n  input {\r\n    flex: 1;\r\n    height: 70px;\r\n    padding: 0 24px;\r\n    border: 0;\r\n    border-radius: 5px 0 0 5px;\r\n    color: #3a3a3a;\r\n    border: 2px solid #fff;\r\n    border-right:0;\r\n    ${(props) =>\r\n      props.hasError &&\r\n      css`\r\n        border-color: #c53030;\r\n      `}\r\n    &::placeholder {\r\n      color: #a8a8b3;\r\n    }\r\n  }\r\n  button {\r\n    width: 210px;\r\n    height: 70px;\r\n    border: 2px solid #04d361;\r\n    background-color: #04d361;\r\n    border-radius: 0 5px 5px 0;\r\n    border: 0;\r\n    color: #fff;\r\n    font-weight: bold;\r\n    transition: background-color 0.2s;\r\n    &:hover {\r\n      background-color: ${shade(0.2, \"#04D361\")};\r\n    }\r\n  }\r\n`;\r\nexport const Error = styled.span`\r\n  display: block;\r\n  color: #c53030;\r\n  margin-top: 8px;\r\n`;\r\n\r\nexport const Repositories = styled.div`\r\n  margin-top: 80px;\r\n  max-width: 700px;\r\n  a {\r\n    background: #fff;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    padding: 24px;\r\n    display: block;\r\n    text-decoration: none;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    transition: transform 0.2s;\r\n\r\n    &:hover {\r\n      transform: translateX(10px);\r\n    }\r\n\r\n    & + a {\r\n      margin-top: 16px;\r\n    }\r\n\r\n    img {\r\n      width: 64px;\r\n      height: 64px;\r\n      border-radius: 50%;\r\n    }\r\n    div {\r\n      margin: 0 16px;\r\n      flex: 1;\r\n      strong {\r\n        font-size: 20px;\r\n        color: #3d3d4d;\r\n      }\r\n      p {\r\n        font-size: 18px;\r\n        color: #a8a8b3;\r\n        margin-top: 5px;\r\n      }\r\n    }\r\n\r\n    svg {\r\n      margin-left: auto;\r\n      color: #cbcbd6;\r\n    }\r\n  }\r\n`;\r\n","import axios from \"axios\";\r\nconst api = axios.create({\r\n  baseURL: \"https://api.github.com\",\r\n});\r\n\r\nexport default api;\r\n","import React, { useState, useEffect, FormEvent } from \"react\";\r\nimport { Link } from 'react-router-dom'\r\nimport { FiChevronRight } from \"react-icons/fi\";\r\n\r\nimport logoImg from \"../../assets/logo.svg\";\r\n\r\nimport { Title, Form, Error, Repositories } from \"./style\";\r\nimport api from \"../../services/api\";\r\n\r\ninterface Repository {\r\n  full_name: string;\r\n  description: string;\r\n  owner: {\r\n    login: string;\r\n    avatar_url: string;\r\n  };\r\n}\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\r\n    const storageRepositories = localStorage.getItem(\r\n      \"@GithubExplorer:repositories\"\r\n    );\r\n\r\n    if (storageRepositories) {\r\n      return JSON.parse(storageRepositories);\r\n    } else {\r\n      return [];\r\n    }\r\n  });\r\n  const [newRepo, setNewRepo] = useState(\"\");\r\n  const [inputError, setInputError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\r\n      \"@GithubExplorer:repositories\",\r\n      JSON.stringify(repositories)\r\n    );\r\n  }, [repositories]);\r\n\r\n  async function handleAddRepository(\r\n    e: FormEvent<HTMLFormElement>\r\n  ): Promise<void> {\r\n    e.preventDefault();\r\n\r\n    if (!newRepo) {\r\n      return setInputError(\"Digite o autor/nome do reposit贸rio.\");\r\n    }\r\n    try {\r\n      const response = await api.get<Repository>(`repos/${newRepo}`);\r\n\r\n      const repository = response.data;\r\n      setRepositories([...repositories, repository]);\r\n      setNewRepo(\"\");\r\n      setInputError(\"\");\r\n    } catch (error) {\r\n      return setInputError(\"Erro na busca por esse reposit贸rio.\");\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <img src={logoImg} alt=\"Github Explorer\" />\r\n      <Title>Explore reposit贸rios no Github.</Title>\r\n\r\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\r\n        <input\r\n          type=\"text\"\r\n          value={newRepo}\r\n          onChange={(e) => setNewRepo(e.target.value)}\r\n          placeholder=\"Digite o nome do reposit贸rio:\"\r\n        />\r\n        <button type=\"submit\">Pesquisar</button>\r\n      </Form>\r\n      {inputError && <Error>{inputError} </Error>}\r\n      <Repositories>\r\n        {repositories.map((repository) => (\r\n          <Link  to={`/repository/${repository.full_name}`} key={repository.full_name}>\r\n            <img\r\n              src={repository.owner.avatar_url}\r\n              alt={repository.owner.login}\r\n            />\r\n            <div>\r\n              <strong>{repository.full_name}</strong>\r\n              <p>{repository.description}</p>\r\n            </div>\r\n            <FiChevronRight size={20} />\r\n          </Link>\r\n        ))}\r\n      </Repositories>\r\n    </>\r\n  );\r\n};\r\nexport default Dashboard;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Header = styled.header`\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:space-between;\r\n    a{\r\n        display:flex;\r\n        align-items:center;\r\n        text-decoration:none;\r\n        color:#A8A8B3;\r\n        transition: color 0.2s;\r\n        &:hover{\r\n            color:#666;\r\n        }\r\n\r\n        svg{\r\n            margin-right:4px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const RepositoryInfo = styled.section`\r\n    margin-top:80px;\r\n    header{\r\n        display:flex;\r\n        align-items:center;\r\n\r\n        img {\r\n            width:120px;\r\n            height:120px;\r\n            border-radius: 50%;\r\n        }\r\n\r\n        div{\r\n            margin-left:24px;\r\n            strong{\r\n                font-size:36px;\r\n                color:#3D3D4D;\r\n            }\r\n            p{\r\n                font-size:18px;\r\n                color:#737380;\r\n                margin-top:4px;\r\n            }\r\n        }\r\n    }\r\n    ul{\r\n        display:flex;\r\n        list-style:none;\r\n        margin-top:40px;\r\n\r\n\r\n        li{\r\n\r\n            & + li{\r\n                margin-left:80px;\r\n            }\r\n            strong{\r\n                display:block;\r\n                color:#3D3D4D;\r\n                font-size:36px;\r\n            }\r\n\r\n            span{\r\n                display:block;\r\n                margin-top:4px;\r\n                color:#6C6C80;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport const Issues = styled.div`\r\n  margin-top: 80px;\r\n  a {\r\n    background: #fff;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    padding: 24px;\r\n    display: block;\r\n    text-decoration: none;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    transition: transform 0.2s;\r\n\r\n    &:hover {\r\n      transform: translateX(10px);\r\n    }\r\n\r\n    & + a {\r\n      margin-top: 16px;\r\n    }\r\n    \r\n    div {\r\n      margin: 0 16px;\r\n      flex: 1;\r\n      strong {\r\n        font-size: 20px;\r\n        color: #3d3d4d;\r\n      }\r\n      p {\r\n        font-size: 18px;\r\n        color: #a8a8b3;\r\n        margin-top: 5px;\r\n      }\r\n    }\r\n\r\n    svg {\r\n      margin-left: auto;\r\n      color: #cbcbd6;\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useRouteMatch, Link } from \"react-router-dom\";\r\nimport { FiChevronRight, FiChevronLeft } from \"react-icons/fi\";\r\n\r\nimport logoImg from \"../../assets/logo.svg\";\r\n\r\nimport { Header, RepositoryInfo, Issues } from \"./styles\";\r\nimport api from \"../../services/api\";\r\n\r\ninterface RepositoryParams {\r\n  repository: string;\r\n}\r\ninterface Repository {\r\n  full_name: string;\r\n  description: string;\r\n  stargazers_count: number;\r\n  forks_count: number;\r\n  open_issues_count: number;\r\n  owner: {\r\n    login: string;\r\n    avatar_url: string;\r\n  };\r\n}\r\n\r\ninterface Issue {\r\n  id: number;\r\n  title: string;\r\n  html_url: string;\r\n  user: {\r\n    login: string;\r\n  };\r\n}\r\nconst Repository: React.FC = () => {\r\n  const [repository, setRepository] = useState<Repository | null>(null);\r\n  const [issues, setIssues] = useState<Issue[]>([]);\r\n  const { params } = useRouteMatch<RepositoryParams>();\r\n  useEffect(() => {\r\n    api.get(`repos/${params.repository}`).then((response) => {\r\n      setRepository(response.data);\r\n    });\r\n    api.get(`repos/${params.repository}/issues`).then((response) => {\r\n      setIssues(response.data);\r\n    });\r\n  }, [params.repository]);\r\n  return (\r\n    <>\r\n      <Header>\r\n        <img src={logoImg} alt=\"Github Explorer\" />\r\n        <Link to=\"/\">\r\n          <FiChevronLeft size={16} />\r\n          Voltar\r\n        </Link>\r\n      </Header>\r\n      {repository && (\r\n        <RepositoryInfo>\r\n          <header>\r\n            <img\r\n              src={repository.owner.avatar_url}\r\n              alt={repository.owner.login}\r\n            />\r\n            <div>\r\n              <strong>{repository.full_name}</strong>\r\n              <p>{repository.description}</p>\r\n            </div>\r\n          </header>\r\n          <ul>\r\n            <li>\r\n              <strong>{repository.stargazers_count}</strong>\r\n              <span>Stars</span>\r\n            </li>\r\n            <li>\r\n              <strong>{repository.forks_count}</strong>\r\n              <span>Forks</span>\r\n            </li>\r\n            <li>\r\n              <strong>{repository.open_issues_count}</strong>\r\n              <span>Issues Abertas</span>\r\n            </li>\r\n          </ul>\r\n        </RepositoryInfo>\r\n      )}\r\n\r\n      <Issues>\r\n        {issues.map((issue) => (\r\n          <a\r\n            href={issue.html_url}\r\n            key={issue.id}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer \"\r\n          >\r\n            <div>\r\n              <strong>{issue.title}</strong>\r\n              <p>{issue.user.login}</p>\r\n            </div>\r\n            <FiChevronRight size={20} />\r\n          </a>\r\n        ))}\r\n      </Issues>\r\n    </>\r\n  );\r\n};\r\nexport default Repository;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Dashboard from '../pages/Dashboard';\r\nimport Repository from '../pages/Repository';\r\n\r\nconst Routes: React.FC = () => {\r\n    return(\r\n        <Switch>\r\n            <Route path=\"/\" exact component={Dashboard} />\r\n            <Route path=\"/repository/:repository+\" exact component={Repository} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Routes;","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport GlobalStyle from \"./styles/global\";\nimport Routes from \"./routes\";\n\nfunction App() {\n  return (\n    <>\n      <BrowserRouter>\n        <Routes />\n      </BrowserRouter>\n      <GlobalStyle />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}